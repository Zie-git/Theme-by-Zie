{% schema %}
{
  "name": "Zoom Image",
  "settings": [
    {
      "type": "image_picker",
      "label": "Background Image",
      "id": "background_image",
      "info": "Select the background image for this section."
    },
    {
      "type": "text",
      "label": "Main Text",
      "id": "main_text",
      "default": "Your Main Text Here",
      "info": "Enter the main text to display over the background."
    },
    {
      "type": "text",
      "label": "Subtitle",
      "id": "subtitle",
      "default": "Your Subtitle Here",
      "info": "Enter the subtitle text."
    },
    {
      "type": "url",
      "label": "Button URL",
      "id": "button_url",
      "default": "/",
      "info": "Enter the URL for the button link."
    },
    {
      "type": "text",
      "label": "Button Text",
      "id": "button_text",
      "default": "Click Me",
      "info": "Enter the text for the button."
    }
  ],
  "presets": [
    {
      "name": "Zoom Image",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<div class="image-text-section" id="zoom-image-section">
  <div class="zoom-effect">
    <div class="image-text-section" style="background-image: url({{ section.settings.background_image | img_url: 'original' }});">
      <div class="overlay">
        <div class="content">
          <h2 class="main-text">{{ section.settings.main_text }}</h2>
          <h3 class="subtitle">{{ section.settings.subtitle }}</h3>
          <a href="{{ section.settings.button_url }}" class="button">{{ section.settings.button_text }}</a>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .image-text-section {
    position: relative;
    background-size: cover;
    background-position: center;
    padding: 50px 20px;
    color: white;
    height: 800px;
    width: 100%;
  }

  /* The overlay with white cover and zoom effect */
  .zoom-effect {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: white; /* White background covering the image */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;
    clip-path: inset(35%); /* Initial state */
    transition: clip-path 0.3s ease; /* Smooth transition for clip-path */
  }

  /* The overlay to dim the background */
  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 2; /* Keep overlay above the image */
  }

  .content {
    text-align: center;
    z-index: 3; /* Keep the content above the overlay */
  }

  .main-text {
    font-size: 2.5rem;
    margin-bottom: 10px;
  }

  .subtitle {
    font-size: 1.5rem;
    margin-bottom: 20px;
  }

  .button {
    padding: 10px 20px;
    background-color: #007bff;
    color: white;
    text-decoration: none;
    border-radius: 5px;
    font-size: 1rem;
  }

  .button:hover {
    background-color: #0056b3;
  }
</style>

<script>
// Set the initial clip-path value
let clipValue = 35; // Starting at 35% as per your example
const CLIP_INCREMENT = 10; // The amount to add/remove per scroll

// Set the maximum and minimum clip-path values
const MAX_CLIP = 35;
const MIN_CLIP = 0;

let isScrollingAllowed = true; // Flag to prevent scroll

const zoomSection = document.getElementById('zoom-image-section');

// Set up the IntersectionObserver to track when the section is in view
const observer = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      // If the section is in view, allow scrolling
      isScrollingAllowed = true;
    } else {
      // If the section is out of view, prevent scrolling
      isScrollingAllowed = false;
    }
  });
}, {
  threshold: 0.5 // Trigger when 50% of the section is in view
});

observer.observe(zoomSection);

window.addEventListener('wheel', function (e) {
  // Only proceed with scroll effects if scrolling is allowed
  if (!isScrollingAllowed) return;

  // Determine scroll direction and adjust clip-value
  if (e.deltaY > 0) {
    // Scroll down - decrease clip value (zoom out)
    clipValue -= CLIP_INCREMENT;
  } else {
    // Scroll up - increase clip value (zoom in)
    clipValue += CLIP_INCREMENT;
  }

  // Ensure the clip value stays within the range of 0% to 35%
  clipValue = Math.max(MIN_CLIP, Math.min(MAX_CLIP, clipValue));

  // Apply the updated clip-path value to all sides (top, right, bottom, left)
  document.querySelector('.zoom-effect').style.clipPath = `inset(${clipValue}%)`;
});







  document.addEventListener('DOMContentLoaded', () => {
  // Select the elements
  const reviewsSection = document.querySelector('#shopify-section-template--16037962121306__reviews_Q43BQ3');
  const stickySection = document.querySelector('#shopify-section-template--16037962121306__zoom_section_yP4rgJ');

  if (reviewsSection && stickySection) {
    function checkOverlap() {
      // Get bounding rectangles
      const reviewsRect = reviewsSection.getBoundingClientRect();
      const stickyRect = stickySection.getBoundingClientRect();

      // Check if there is any overlap
      const isOverlapping = !(
        reviewsRect.right <= stickyRect.left ||
        reviewsRect.left >= stickyRect.right ||
        reviewsRect.bottom <= stickyRect.top ||
        reviewsRect.top >= stickyRect.bottom
      );

      // Log the result
      if (isOverlapping) {
        console.log('The reviews section is overlapping the sticky section.');
      } else {
        console.log('The reviews section is NOT overlapping the sticky section.');
      }
    }

    // Debounce to avoid firing too frequently on scroll/resize
    let timeout;
    function debounceCheck() {
      clearTimeout(timeout);
      timeout = setTimeout(checkOverlap, 100);
    }

    // Run the check on scroll and resize
    window.addEventListener('scroll', debounceCheck);
    window.addEventListener('resize', debounceCheck);

    // Initial check
    checkOverlap();
  } else {
    console.error('One or both sections are missing from the DOM.');
  }
});
</script>
