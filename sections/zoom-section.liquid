{% schema %}
{
  "name": "Zoom Image",
  "settings": [
    {
      "type": "image_picker",
      "label": "Background Image",
      "id": "background_image",
      "info": "Select the background image for this section."
    },
    {
      "type": "text",
      "label": "Main Text",
      "id": "main_text",
      "default": "Your Main Text Here",
      "info": "Enter the main text to display over the background."
    },
    {
      "type": "text",
      "label": "Subtitle",
      "id": "subtitle",
      "default": "Your Subtitle Here",
      "info": "Enter the subtitle text."
    },
    {
      "type": "url",
      "label": "Button URL",
      "id": "button_url",
      "default": "/",
      "info": "Enter the URL for the button link."
    },
    {
      "type": "text",
      "label": "Button Text",
      "id": "button_text",
      "default": "Click Me",
      "info": "Enter the text for the button."
    }
  ],
  "presets": [
    {
      "name": "Zoom Image",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<div class="image-text-section" id="zoom-image-section">
  <div class="zoom-effect">
    <div class="image-text-section" style="background-image: url({{ section.settings.background_image | img_url: 'original' }});">
      <div class="overlay">
        <div class="content">
          <h2 class="main-text">{{ section.settings.main_text }}</h2>
          <h3 class="subtitle">{{ section.settings.subtitle }}</h3>
          <a href="{{ section.settings.button_url }}" class="button">{{ section.settings.button_text }}</a>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .image-text-section {
    position: relative;
    background-size: cover;
    background-position: center;
    padding: 50px 20px;
    color: white;
    height: 800px;
    width: 100%;
  }

  /* The overlay with white cover and zoom effect */
  .zoom-effect {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: white; /* White background covering the image */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;
    clip-path: inset(35%); /* Initial state */
    transition: clip-path 0.3s ease; /* Smooth transition for clip-path */
  }

  /* The overlay to dim the background */
  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 2; /* Keep overlay above the image */
  }

  .content {
    text-align: center;
    z-index: 3; /* Keep the content above the overlay */
  }

  .main-text {
    font-size: 2.5rem;
    margin-bottom: 10px;
  }

  .subtitle {
    font-size: 1.5rem;
    margin-bottom: 20px;
  }

  .button {
    padding: 10px 20px;
    background-color: #007bff;
    color: white;
    text-decoration: none;
    border-radius: 5px;
    font-size: 1rem;
  }

  .button:hover {
    background-color: #0056b3;
  }
</style>

<script>
  const MAX_CLIP = 35; // Maximum clip-path value
  const MIN_CLIP = 0;  // Minimum clip-path value

  let isScrollingAllowed = true; // Flag to allow or prevent scrolling
  let currentClipValue = MAX_CLIP; // Initial clip-path value
  const zoomEffect = document.querySelector('.zoom-effect');
  const zoomSection = document.getElementById('zoom-image-section');

  // Update the clip-path value
  const updateClipPath = (value) => {
    zoomEffect.style.clipPath = `inset(${value}%)`;
  };

  // Set up the IntersectionObserver to ensure section is in view
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        isScrollingAllowed = true; // Allow scrolling when section is visible
      } else {
        isScrollingAllowed = false; // Prevent scrolling when section is not visible
      }
    });
  }, {
    threshold: 0.5 // Trigger when 50% of the section is in view
  });

  observer.observe(zoomSection);

  window.addEventListener('scroll', function (event) {
    // Only proceed if scrolling is allowed
    if (!isScrollingAllowed) return;

    const scrollPosition = window.scrollY;
    const maxScroll = document.body.scrollHeight - window.innerHeight;

    // Calculate the scroll percentage
    const scrollPercent = scrollPosition / maxScroll;

    // Calculate the new clip-path value
    const targetClipValue = MAX_CLIP - (scrollPercent * (MAX_CLIP - MIN_CLIP));

    // Check if we need to lock scrolling
    if (targetClipValue <= MIN_CLIP || targetClipValue >= MAX_CLIP) {
      isScrollingAllowed = false; // Lock scrolling
      currentClipValue = targetClipValue <= MIN_CLIP ? MIN_CLIP : MAX_CLIP; // Clamp value
    } else {
      currentClipValue = targetClipValue; // Update the clip-path value
    }

    // Apply the new clip-path value
    updateClipPath(currentClipValue);

    // Prevent scrolling past the section
    if (!isScrollingAllowed) {
      event.preventDefault(); // Stop the default scroll behavior
      window.scrollTo(0, scrollPosition); // Maintain the current scroll position
    } else {
      updateClipPath(currentClipValue);
    }
  });

  // Re-enable scrolling when reaching bounds
  window.addEventListener('wheel', (event) => {
    if (!isScrollingAllowed) {
      const delta = event.deltaY;

      if (
        (delta > 0 && currentClipValue === MAX_CLIP) || // Down scroll at max clip
        (delta < 0 && currentClipValue === MIN_CLIP)   // Up scroll at min clip
      ) {
        isScrollingAllowed = true; // Allow scrolling again
      }
    }
  });
</script>

