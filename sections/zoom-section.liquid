{% schema %}
{
  "name": "Zoom Image",
  "settings": [
    {
      "type": "image_picker",
      "label": "Background Image",
      "id": "background_image",
      "info": "Select the background image for this section."
    },
    {
      "type": "text",
      "label": "Main Text",
      "id": "main_text",
      "default": "Your Main Text Here",
      "info": "Enter the main text to display over the background."
    },
    {
      "type": "text",
      "label": "Subtitle",
      "id": "subtitle",
      "default": "Your Subtitle Here",
      "info": "Enter the subtitle text."
    },
    {
      "type": "url",
      "label": "Button URL",
      "id": "button_url",
      "default": "/",
      "info": "Enter the URL for the button link."
    },
    {
      "type": "text",
      "label": "Button Text",
      "id": "button_text",
      "default": "Click Me",
      "info": "Enter the text for the button."
    }
  ],
  "presets": [
    {
      "name": "Zoom Image",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<div class="image-text-section">
  <div class="zoom-effect">
    <div class="image-text-section" style="background-image: url({{ section.settings.background_image | img_url: 'original' }});">
      <div class="overlay">
        <div class="content">
          <h2 class="main-text">{{ section.settings.main_text }}</h2>
          <h3 class="subtitle">{{ section.settings.subtitle }}</h3>
          <a href="{{ section.settings.button_url }}" class="button">{{ section.settings.button_text }}</a>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .image-text-section {
    position: relative;
    background-size: cover;
    background-position: center;
    padding: 50px 20px;
    color: white;
    height: 800px;
    width: 100%;
  }

  .zoom-effect {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: white;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;
    clip-path: inset(35%);
    transition: clip-path 0.3s ease;
  }

  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 2;
  }

  .content {
    text-align: center;
    z-index: 3;
  }

  .main-text {
    font-size: 2.5rem;
    margin-bottom: 10px;
  }

  .subtitle {
    font-size: 1.5rem;
    margin-bottom: 20px;
  }

  .button {
    padding: 10px 20px;
    background-color: #007bff;
    color: white;
    text-decoration: none;
    border-radius: 5px;
    font-size: 1rem;
  }

  .button:hover {
    background-color: #0056b3;
  }
</style>

<script>
  let isSectionVisible = false;
  let isZoomEffectComplete = false;

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      isSectionVisible = entry.isIntersecting;
    });
  }, { threshold: 0.5 });

  observer.observe(document.querySelector('.image-text-section'));

  const MAX_CLIP = 35;
  const MIN_CLIP = 0;
  let scrollPosition = window.scrollY;
  let previousScrollPosition = scrollPosition;
  let isScrollingDown = false;

  window.addEventListener('scroll', function () {
    if (!isSectionVisible) return;

    if (scrollPosition > previousScrollPosition) {
      isScrollingDown = true;
    } else {
      isScrollingDown = false;
    }

    previousScrollPosition = scrollPosition;
    
    if (isScrollingDown && !isZoomEffectComplete) {
      return;
    }

    let maxScroll = document.body.scrollHeight - window.innerHeight;
    let scrollPercent = (scrollPosition / maxScroll);
    let newClipValue = MAX_CLIP - (scrollPercent * (MAX_CLIP - MIN_CLIP));
    newClipValue = Math.max(MIN_CLIP, Math.min(MAX_CLIP, newClipValue));

    document.querySelector('.zoom-effect').style.clipPath = `inset(${newClipValue}%)`;

    if (newClipValue <= MIN_CLIP) {
      isZoomEffectComplete = true;
    } else {
      isZoomEffectComplete = false;
    }
  });
</script>
