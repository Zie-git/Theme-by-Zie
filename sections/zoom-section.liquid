<div class="image-text-section" id="zoom-image-section">
  <div class="zoom-effect">
    <div class="image-text-section" style="background-image: url({{ section.settings.background_image | img_url: 'original' }});">
      <div class="overlay">
        <div class="content">
          <h2 class="main-text">{{ section.settings.main_text }}</h2>
          <h3 class="subtitle">{{ section.settings.subtitle }}</h3>
          <a href="{{ section.settings.button_url }}" class="button">{{ section.settings.button_text }}</a>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .image-text-section {
    position: relative;
    background-size: cover;
    background-position: center;
    padding: 50px 20px;
    color: white;
    height: 800px;
    width: 100%;
    overflow: hidden; /* Hide any overflow content */
  }

  /* The zoom-effect with overflow enabled */
  .zoom-effect {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: white; /* White background covering the image */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;
    clip-path: inset(35%); /* Initial state */
    transition: clip-path 0.3s ease; /* Smooth transition for clip-path */
    overflow: visible; /* Allow overflow */
  }

  /* The overlay to dim the background */
  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 2; /* Keep overlay above the image */
  }

  .content {
    text-align: center;
    z-index: 3; /* Keep the content above the overlay */
  }

  .main-text {
    font-size: 2.5rem;
    margin-bottom: 10px;
  }

  .subtitle {
    font-size: 1.5rem;
    margin-bottom: 20px;
  }

  .button {
    padding: 10px 20px;
    background-color: #007bff;
    color: white;
    text-decoration: none;
    border-radius: 5px;
    font-size: 1rem;
  }

  .button:hover {
    background-color: #0056b3;
  }
</style>

<script>
  const MAX_CLIP = 35;
  const MIN_CLIP = 0;

  let isScrollingAllowed = true; // Flag to prevent scroll

  const zoomSection = document.getElementById('zoom-image-section');

  // Set up the IntersectionObserver to track when the section is in view
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        // If the section is in view, allow scrolling
        isScrollingAllowed = true;
      } else {
        // If the section is out of view, prevent scrolling
        isScrollingAllowed = false;
      }
    });
  }, {
    threshold: 0.5 // Trigger when 50% of the section is in view
  });

  observer.observe(zoomSection);

  window.addEventListener('scroll', function (event) {
    if (!isScrollingAllowed) return;

    var scrollPosition = window.scrollY;
    var maxScroll = document.body.scrollHeight - window.innerHeight;

    // Calculate the scroll percentage
    var scrollPercent = (scrollPosition / maxScroll);

    // Calculate the new clip-path value based on the scroll position
    var newClipValue = MAX_CLIP - (scrollPercent * (MAX_CLIP - MIN_CLIP));

    // Ensure that the value stays within the range of 0% to 35%
    newClipValue = Math.max(MIN_CLIP, Math.min(MAX_CLIP, newClipValue));

    // Apply the new clip-path value to all sides (top, right, bottom, left)
    document.querySelector('.zoom-effect').style.clipPath = `inset(${newClipValue}%)`;

    // Prevent scrolling past the section by controlling scroll behavior
    if (newClipValue !== MIN_CLIP && newClipValue !== MAX_CLIP) {
      event.preventDefault(); // Prevent the scroll from moving past the section
    }

    // Allow scrolling to the next section if clip-path reaches its target
    if (newClipValue === MIN_CLIP || newClipValue === MAX_CLIP) {
      isScrollingAllowed = true;
    } else {
      event.preventDefault(); // Stay within the zoom section until effect completes
    }
  });
</script>
