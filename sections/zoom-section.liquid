<div class="scroll-zoom-section">
  <div 
    class="scroll-zoom-box" 
    style="background-image: url('{{ section.settings.background_image }}');">
    <div class="content">
      {{ section.settings.content }}
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Scrolling Zoom Section",
  "settings": [
    {
      "type": "image_picker",
      "id": "background_image",
      "label": "Background Image",
      "info": "Select the background image to display."
    },
    {
      "type": "text",
      "id": "content",
      "label": "Content",
      "default": "This is the content that will appear as you scroll.",
      "info": "Customize the content text here."
    }
  ],
  "presets": [
    {
      "name": "Scrolling Zoom Section",
      "category": "Image"
    }
  ]
}
{% endschema %}


<style>
  .scroll-zoom-section {
    position: relative;
    height: 100vh; /* Full viewport height */
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .scroll-zoom-box {
    position: absolute;
    width: 300px; /* Initial box size */
    height: 300px;
    background-size: cover;
    background-position: center;
    border-radius: 10px; /* Optional: round corners */
    transform: scale(1); /* Initial scale */
    transition: transform 0.5s ease, width 0.5s ease, height 0.5s ease;
  }

  .scroll-zoom-box .content {
    position: absolute;
    bottom: 20px;
    left: 20px;
    color: white;
    background: rgba(0, 0, 0, 0.5);
    padding: 10px 20px;
    border-radius: 5px;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .scroll-zoom-box.zoomed .content {
    opacity: 1; /* Fade in content when zoomed */
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const zoomBox = document.querySelector('.scroll-zoom-box');

    if (!zoomBox) {
      console.error('Zoom box element not found.');
      return;
    }

    document.addEventListener('scroll', () => {
      const rect = zoomBox.getBoundingClientRect();
      const sectionHeight = window.innerHeight;

      // Check if the box is in view
      if (rect.top < sectionHeight && rect.bottom > 0) {
        const scrollProgress = Math.max(0, Math.min(1, (sectionHeight - rect.top) / sectionHeight));
        const zoomLevel = 1 + scrollProgress * 0.5; // Scale up to 1.5
        const boxSize = 300 + scrollProgress * (sectionHeight - 300); // Increase box size

        zoomBox.style.transform = `scale(${zoomLevel})`;
        zoomBox.style.width = `${boxSize}px`;
        zoomBox.style.height = `${boxSize}px`;

        // Add zoomed class for content visibility
        if (scrollProgress > 0.2) {
          zoomBox.classList.add('zoomed');
        } else {
          zoomBox.classList.remove('zoomed');
        }
      }
    });
  });
</script>
