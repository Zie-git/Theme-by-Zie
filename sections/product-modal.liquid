{% schema %}
{
  "name": "Featured Products",
  "settings": [
    {
      "type": "range",
      "id": "padding_top",
      "label": "Padding Top",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 20
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "label": "Padding Bottom",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 20
    },
    {
      "type": "range",
      "id": "width",
      "label": "Width (%)",
      "min": 0,
      "max": 100,
      "step": 5,
      "default": 100
    }
  ],
  "blocks": [
    {
      "type": "product1",
      "name": "Product 1",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product 1"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Button Text",
          "default": "Buy 1"
        }
      ]
    },
    {
      "type": "product2",
      "name": "Product 2",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product 2"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Button Text",
          "default": "Buy 3"
        }
      ]
    },
    {
      "type": "product3",
      "name": "Product 3",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product 3"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Button Text",
          "default": "Buy 5"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "C-Featured Products",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<div class="featured-products" style="padding-top: {{ section.settings.padding_top }}px; padding-bottom: {{ section.settings.padding_bottom }}px; width: {{ section.settings.width }}%;">
  <h2>Choose Your Kelvin 36 Package</h2>
  <div class="products-grid">
    {% for block in section.blocks %}
      {% assign product = all_products[block.settings.product] %}
      {% if product %}
        <div class="product-card">
          <div class="product-image">
            {% if block.type == 'product2' %}
              <div class="label most-popular">Most Popular</div>
            {% elsif block.type == 'product3' %}
              <div class="label best-deal">Best Deal</div>
            {% endif %}
            <!-- The featured image for the product -->
            <img id="product-image-{{ block.id }}" src="{{ product.featured_image | img_url: '2048x2048' }}" alt="{{ product.title }}">
          </div>
          <div class="product-info">
            <h3 class="product-title">{{ product.title }}</h3>
            {% if product.compare_at_price > product.price %}
              <div class="price">
                <span class="selling-price">{{ product.price | money }}</span>
                <span class="compared-price">{{ product.compare_at_price | money }}</span>
              </div>
              <div class="savings" id="savings-{{ block.id }}"></div>
            {% else %}
              <div class="price">
                <span class="selling-price">{{ product.price | money }}</span>
              </div>
            {% endif %}

            
<div id="productModal" class="modal" style="background-color: {{ settings.modal_overlay }}">
  <div class="modal-content" style="background-color: {{ settings.modal_background }}">
    <span class="close" id="closeModalBtn">&times;</span>

    <!-- Modal Product Image -->
    <div class="modal-product-image">
      <img id="modal-product-image" src="" alt="Product Image">
    </div>

    <!-- Color Picker as Color Boxes for Variants -->
    {% if product.variants.size > 1 %}
      <div class="color-options">
        <label>Choose Color:</label>
        <div class="variant-boxes">
          {% for variant in product.variants %}
            {% if variant.available %}
              <!-- Color box as clickable option -->
              <div 
                class="color-box" 
                style="background-color: {{ variant.option1 | downcase }};" 
                data-variant-id="{{ variant.id }}" 
                data-block-id="{{ block.id }}" 
                data-image="{{ variant.image | img_url: '2048x2048' }}"
              >
                <input 
                  type="radio" 
                  name="variant-{{ block.id }}" 
                  value="{{ variant.id }}" 
                  {% if variant.id == product.selected_or_first_available_variant.id %}checked{% endif %}
                  class="variant-option" 
                  style="display:none;" 
                />
              </div>
            {% endif %}
          {% endfor %}
        </div>
      </div>
    {% endif %}

    <!-- Order Now Button -->
    <form method="post" action="/cart/add" class="product-form-{{ block.id }}">
      <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}" class="variant-id-{{ block.id }}">
      <button type="submit" class="order-now" onclick="addToCartAndCheckout(event, this)">
        {{ block.settings.button_text }}
      </button>
      <div class="loading-spinner" style="display: none;">Loading...</div>
    </form>
  </div>
</div>

<button class="btn" id="buyNowBtn">Buy Now</button>
            
        </div>
      {% endif %}
    {% endfor %}
  </div>
      </div>



<script>
  // Update hidden variant input and modal image based on selected color box
  document.querySelectorAll('.color-box').forEach(box => {
    box.addEventListener('click', function() {
      const variantId = this.getAttribute('data-variant-id');
      const blockId = this.getAttribute('data-block-id');
      const hiddenInput = document.querySelector('.variant-id-' + blockId);
      const newImageUrl = this.getAttribute('data-image');
      const productImage = document.querySelector('#product-image-' + blockId);
      const modalImage = document.querySelector('#modal-product-image');

      // Update hidden variant input value
      hiddenInput.value = variantId;

      // Change product image based on variant
      if (productImage && newImageUrl) {
        productImage.src = newImageUrl;
      }

      // Change modal image based on variant
      if (modalImage && newImageUrl) {
        modalImage.src = newImageUrl;
      }

      // Update selected color box style
      document.querySelectorAll('.color-box').forEach(box => {
        box.classList.remove('selected');  // Remove the selection class from all boxes
      });
      this.classList.add('selected');  // Add the selection class to the clicked box

      // Simulate the radio button being checked
      document.querySelectorAll('.variant-option').forEach(radio => {
        radio.checked = false;
      });
      const selectedRadio = this.querySelector('.variant-option');
      if (selectedRadio) {
        selectedRadio.checked = true;
      }
    });
  });


  // Function to calculate savings percentage and display it
  function calculateSavings() {
    const productCards = document.querySelectorAll('.product-card');
    productCards.forEach((card) => {
      const comparedPriceElem = card.querySelector('.compared-price');
      const sellingPriceElem = card.querySelector('.selling-price');
      const savingsElem = card.querySelector('.savings');

      if (comparedPriceElem && sellingPriceElem && savingsElem) {
        const comparedPrice = parseFloat(comparedPriceElem.innerText.replace(/[$,]/g, ''));
        const sellingPrice = parseFloat(sellingPriceElem.innerText.replace(/[$,]/g, ''));

        if (comparedPrice > sellingPrice) {
          const savingsPercentage = ((comparedPrice - sellingPrice) / comparedPrice) * 100;
          savingsElem.innerText = `Save ${Math.round(savingsPercentage)}%`;
        } else {
          savingsElem.innerText = 'No savings';
        }
      }
    });
  }

  document.addEventListener('DOMContentLoaded', calculateSavings);

  // Function to clear the cart before adding the new product
  function clearCart() {
    return fetch('/cart/clear.js', {
      method: 'POST'
    }).then(response => response.json());
  }

  // Function to add product to cart and proceed to checkout
  function addToCartAndCheckout(event, button) {
    event.preventDefault();
    var form = event.target.closest('form');
    var loadingSpinner = form.querySelector('.loading-spinner');

    button.disabled = true;
    button.innerText = 'Processing...';
    loadingSpinner.style.display = 'block';

    // First, clear the cart
    clearCart()
      .then(() => {
        // Add the product to the cart
        return fetch('/cart/add.js', {
          method: 'POST',
          body: new FormData(form),
        });
      })
      .then(response => response.json())
      .then(data => {
        window.location.href = '/checkout';  // Redirect to checkout
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        button.disabled = false;
        button.innerText = 'Order Now';
        loadingSpinner.style.display = 'none';
      });
  }




  document.addEventListener("DOMContentLoaded", function() {
    const modal = document.getElementById("productModal");
    const openBtn = document.getElementById("buyNowBtn");
    const closeBtn = document.getElementById("closeModalBtn");
    const modalImage = document.getElementById("modal-product-image");

    if (modal && openBtn && closeBtn) {
      openBtn.addEventListener("click", function() {
        const firstVariantImage = document.querySelector('.color-box.selected')?.getAttribute('data-image');
        if (firstVariantImage && modalImage) {
          modalImage.src = firstVariantImage; // Set modal image to selected variant
        }
        modal.classList.add("show");
      });

      closeBtn.addEventListener("click", function() {
        modal.classList.remove("show");
      });

      window.addEventListener("click", function(event) {
        if (event.target === modal) {
          modal.classList.remove("show");
        }
      });
    }
  });
</script>


<style>
  .color-options {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 10px;
  }

  .variant-boxes {
    display: flex;
    gap: 5px;
  }

  .variant-option {
    width: 30px;
    height: 30px;
    border: 2px solid #ccc;
    border-radius: 50%;
    cursor: pointer;
  }

  .variant-option:checked {
    border: 2px solid #000;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
  }

  .featured-products {
    margin: auto;
  }
  .products-grid {
    display: flex;
    justify-content: center;
    gap: 5px;
    align-items: center;
  }
  .product-card {
    border: 1px solid #f57f29;
    padding: 10px;
    width: 100%;
    text-align: center;
    position: relative;
  }
  .product-image {
    position: relative;
  }
  .label {
    position: absolute;
    top: 0px;
    left: 0px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 10px 10px;
    font-size: 18px;
    font-weight: bold;
    z-index: 10;
    width: 50%;
  }
  .most-popular {
    background-color: #ff9800;
  }
  .best-deal {
    background-color: #4caf50;
  }
  .product-image img {
    max-width: 100%;
    height: auto;
  }
  .price {
    display: flex;
    justify-content: center;
    align-items: baseline;
  }
  .compared-price {
    text-decoration: line-through;
    margin-right: 10px;
    color: red;
    font-size: 15px;
    padding-left: 10px;
  }
  .order-now {
    background-color: #f57f29;
    color: white;
    border: none;
    padding: 10px 10px;
    cursor: pointer;
    transition: background-color 0.3s;
    font-size: 16px;
    width: 100%;
    border-radius: 5px;
  }
  .order-now:hover {
    background-color: #f57f29;
    box-shadow: 0 0 15px rgba(245, 127, 41, 0.7), 0 0 30px rgba(245, 127, 41, 0.5);
  }
  .loading-spinner {
    margin-top: 10px;
    color: #f57f29;
    font-size: 14px;
  }
  @media (max-width: 1000px) {
    .products-grid {
      flex-direction: column;
    }
  }


   .color-options {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 10px;
  }

  .variant-boxes {
    display: flex;
    gap: 10px;
  }

  .color-box {
    width: 30px;
    height: 30px;
    border-radius: 5px;
    border: 2px solid #ccc;
    cursor: pointer;
    transition: box-shadow 0.3s ease;
  }

  .color-box:hover {
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
  }

  .color-box.selected {
    border: 2px solid #000;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);
  }

  .variant-option:checked + .color-box {
    border: 2px solid #000;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);
  }

    display: flex;
    justify-content: center;
    gap: 5px;
    align-items: center;




  
</style>

